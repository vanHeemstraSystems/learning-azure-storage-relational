[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "topics/what-cosmos-db-apis-are-supported.html",
    "href": "topics/what-cosmos-db-apis-are-supported.html",
    "title": "What Cosmos DB APIs are supported?",
    "section": "",
    "text": "Source: Relational Storage\n\nWhat Cosmos DB APIs are supported?\n\n\n\nCosmos DB APIs"
  },
  {
    "objectID": "topics/authenticate-to-an-azure-sql-database.html",
    "href": "topics/authenticate-to-an-azure-sql-database.html",
    "title": "Authenticate to an Azure SQL Database",
    "section": "",
    "text": "Source: Relational Storage\n\nAuthenticate to an Azure SQL Database\n\n\n\nAuthenticate to an Azure SQL Database\n\n\n\nSQL database supports two types of authentication - SQL server authentication and Azure AD authentication.\nSQL server authentication credentials are stored in the dataabase.\nAzure AD authentication uses managed identities."
  },
  {
    "objectID": "topics/protect-your-database.html",
    "href": "topics/protect-your-database.html",
    "title": "Protect Your Database",
    "section": "",
    "text": "Source: Relational Storage\n\nProtect Your Database\nUse a layered (defense in depth) approach to data protection.\n\n\n\n\n\n\n\n\n\nNetwork Security\nIdentity and Access\nData Protection\nSecurity Management\n\n\n\n\n- VNet- Firewall rules, NSG.- Private link.\n- Authentication options: Azure AD, SQL Auth, Windows Auth.- Azure RBAC.- Roles and permissions.- Row level security.\n- Encryption-in-use (Always encrypted)- Encryption-at-rest (TDE).- Encryption-in-flight (TLS).- Customer-managed keys.- Dynamic data masking.\n- Advanced threat protection.- SQL audit.- Audit integration with log analytics and event hubs.- Vulnerability assessment.- Data discovery and classification.- Microsoft Defender for Cloud."
  },
  {
    "objectID": "topics/when-to-use-azure-cosmos-db.html",
    "href": "topics/when-to-use-azure-cosmos-db.html",
    "title": "When to use Azure Cosmos DB",
    "section": "",
    "text": "Source: Relational Storage\n\nWhen to use Azure Cosmos DB\nA fully managed NoSQL database service for modern app development. It has single-digit millisecond response times and guaranteed speed at any scale.\n\n\n\nAzure Cosmos DB\n\n\n\nWeb and mobile applications that store and query user generated content like tweets and blog posts.\nRetail and marketing industry that store catalog data and event sourcing in order processing pipelines.\nGaming that requires single milli-second latencies for reads and writes and can handle massive spikes in request rates during new game launches or feature updates.\nIoT use cases can load data into Azure Cosmos DB for adhoc querying. New data and changes to existing data can be read on change feed. Then all data or just changes to data in Azure Cosmos DB can be used as reference data as part of real-time analytics."
  },
  {
    "objectID": "topics/azure-storage-tables-and-azure-cosmos-db-tables.html",
    "href": "topics/azure-storage-tables-and-azure-cosmos-db-tables.html",
    "title": "Azure Storage tables and Azure Cosmos DB tables",
    "section": "",
    "text": "Source: Relational Storage\n\nAzure Storage tables and Azure Cosmos DB tables\n\nAzure Table storage is a service that stores non-relational structured data (also known as structured NoSQL data) in the cloud, providing a key/attribute store with a schemeless design.\nAzure Cosmos DB provides the Table API for applications that are written for Azure Table storage and that need premium capabilities like high availability, scalability, and dedicated throughput.\n\n\n\nDifferences in behavior\n\nYou are charged for the capacity of an Azure Cosmos DB table as soon as it is created, even if that capacity isn’t used.\nQuery results from Azure Cosmos DB are not sorted in order of partition key and row key as they are from Storage tables.\nRow keys in Azure Cosmos DB are limited to 255 bytes.\nCross-Origin Resource Sharing (CORS) is supported by Azure Cosmos DB.\nTable names are case-sensitive in Azure Cosmos DB. They are not case-sensitive in Storage tables."
  },
  {
    "objectID": "topics/database-scaling-strategy.html",
    "href": "topics/database-scaling-strategy.html",
    "title": "Database Scaling Strategy",
    "section": "",
    "text": "Source: Relational Storage\n\nDatabase Scaling Strategy\nThe following table identifies scenarios that require different scaling solutions.\n\n\n\nDatabase Scaling Strategy\n\n\n\n\n\n\n\n\n\nRequirement\nSolution\n\n\n\n\nDo you have to manage and scale multiple Azure SQL databases that have varying and unpredictable resource requirements?\nSQL elastic pools\n\n\nAre you developing a new application with a single database that you want to test before launching it to thousands of users?\nAzure SQL Database or SQL Managed Instance\n\n\nDo you need to optimize the price performance for a group of databases within a prescribed budget while delivering performance elasticity for each database?\nSQL elastic pools\n\n\n\nConsider cost together with your scaling strategy to find an optimal solution."
  },
  {
    "objectID": "topics/when-to-use-azure-sql-databases.html",
    "href": "topics/when-to-use-azure-sql-databases.html",
    "title": "When to use Azure SQL Databases",
    "section": "",
    "text": "Source: Relational Storage\n\nWhen to use Azure SQL Databases\n\n\n\nAzure SQL Databases"
  },
  {
    "objectID": "topics/select-an-azure-sql-database-pricing-model.html",
    "href": "topics/select-an-azure-sql-database-pricing-model.html",
    "title": "Select an Azure SQL Database Pricing Model",
    "section": "",
    "text": "Source: Relational Storage\n\nSelect an Azure SQL Database Pricing Model\n\n\n\nAzure SQL Database Pricing Model"
  },
  {
    "objectID": "topics/designing-for-structured-and-semi-structured-data.html",
    "href": "topics/designing-for-structured-and-semi-structured-data.html",
    "title": "Designing for Structured and Semi-Structured Data",
    "section": "",
    "text": "Source: Relational Storage\n\nDesigning for Structured and Semi-Structured Data\n\n\n\nData Storage\n\n\nTo design Azure storage, you first must determine what type of data you have:\n\nStructured data includes relational data and has a shared schema.\nSemi-structured is less organized than structured data and isn’t stored in a relational format.\nUnstructured data is the least organized type of data."
  },
  {
    "objectID": "topics/when-to-use-azure-sql-edge.html",
    "href": "topics/when-to-use-azure-sql-edge.html",
    "title": "When to use Azure SQL Edge",
    "section": "",
    "text": "Source: Relational Storage\n\nWhen to use Azure SQL Edge\nAn optimized relational database engine geared for IoT and IoT Edge deployments. It is a containerized Linux application that runs on a process that is based on ARM64 or x64.\n\n\n\nWhen to use Azure SQL Edge\n\n\nUse SQL Edge when you need to:\n\nCapture continuous data streams in real time.\nIntegrate the data in a comprehensive organizational data solution.\nSynchronization and connectivity to back-end systems.\nOvercome connectivity limitations.\nOvercome slow or intermittent broadband connection."
  },
  {
    "objectID": "SUMMARY.html",
    "href": "SUMMARY.html",
    "title": "Table of contents",
    "section": "",
    "text": "Table of contents\n\nLearning Azure Storage Relational"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Learning Azure Storage Relational",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\nTopics\nSee Topics"
  }
]